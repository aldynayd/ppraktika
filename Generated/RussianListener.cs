//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Russian.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RussianParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IRussianListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RussianParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] RussianParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RussianParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] RussianParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="RussianParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] RussianParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="RussianParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] RussianParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="RussianParser.stat1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintExpr([NotNull] RussianParser.PrintExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="RussianParser.stat1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintExpr([NotNull] RussianParser.PrintExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Tan</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTan([NotNull] RussianParser.TanContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Tan</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTan([NotNull] RussianParser.TanContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdd([NotNull] RussianParser.AddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdd([NotNull] RussianParser.AddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Sub</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSub([NotNull] RussianParser.SubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Sub</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSub([NotNull] RussianParser.SubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Ln</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLn([NotNull] RussianParser.LnContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Ln</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLn([NotNull] RussianParser.LnContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryplus</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryplus([NotNull] RussianParser.UnaryplusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryplus</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryplus([NotNull] RussianParser.UnaryplusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Mod</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMod([NotNull] RussianParser.ModContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Mod</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMod([NotNull] RussianParser.ModContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Mul</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMul([NotNull] RussianParser.MulContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Mul</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMul([NotNull] RussianParser.MulContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Cos</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCos([NotNull] RussianParser.CosContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Cos</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCos([NotNull] RussianParser.CosContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Sqrt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSqrt([NotNull] RussianParser.SqrtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Sqrt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSqrt([NotNull] RussianParser.SqrtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Lt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLt([NotNull] RussianParser.LtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Lt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLt([NotNull] RussianParser.LtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Gt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGt([NotNull] RussianParser.GtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Gt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGt([NotNull] RussianParser.GtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] RussianParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] RussianParser.CallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Div</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDiv([NotNull] RussianParser.DivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Div</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDiv([NotNull] RussianParser.DivContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>prim</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrim([NotNull] RussianParser.PrimContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>prim</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrim([NotNull] RussianParser.PrimContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Gta</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGta([NotNull] RussianParser.GtaContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Gta</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGta([NotNull] RussianParser.GtaContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Lta</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLta([NotNull] RussianParser.LtaContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Lta</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLta([NotNull] RussianParser.LtaContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Sin</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSin([NotNull] RussianParser.SinContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Sin</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSin([NotNull] RussianParser.SinContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Pow</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPow([NotNull] RussianParser.PowContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Pow</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPow([NotNull] RussianParser.PowContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryminus</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryminus([NotNull] RussianParser.UnaryminusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryminus</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryminus([NotNull] RussianParser.UnaryminusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>num</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNum([NotNull] RussianParser.NumContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>num</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNum([NotNull] RussianParser.NumContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] RussianParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] RussianParser.IdContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] RussianParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] RussianParser.ParensContext context);
}
