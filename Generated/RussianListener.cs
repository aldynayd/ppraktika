//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Russian.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

Stack MyStack = new MyStack();

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RussianParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IRussianListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RussianParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] RussianParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RussianParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] RussianParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="RussianParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] RussianParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="RussianParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] RussianParser.AssignContext context);

			# Parser
			ExprNode parse(string input){
    			char c;
				while (c = input.getNextChar()) {
					if ( c = ASSIGN ) MyStack.push(c); }

            	while(operatorStack.top().precedence >= c.precedence)
            	    operator = operatorStack.pop();
            	    # Careful! The second operand was pushed last.
            	    e2 = exprStack.pop();
            	    e1 = exprStack.pop();
            	    exprStack.push(ExprNode(operator, e1, e2));

            		operatorStack.push(c);

        		else if (c == ')'){
            		while (operatorStack.top() != '('):
            	    operator = operatorStack.pop()
            	    # Careful! The second operand was pushed last.
            	    e2 = exprStack.pop()
            	    e1 = exprStack.pop()
           		    exprStack.push(ExprNode(operator, e1, e2))
				}
            # Pop the '(' off the operator stack.
            operatorStack.pop()

        else:
            error()
            return 0;

    # There should only be one item on exprStack.
    # It's the root node, so we return it.
    return exprStack.pop()
	
	/// <summary>
	/// Enter a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="RussianParser.stat1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintExpr([NotNull] RussianParser.PrintExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="RussianParser.stat1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintExpr([NotNull] RussianParser.PrintExprContext context);
			# Parser
			ExprNode parse(string input){
    			char c;
				while (c = input.getNextChar()) {
					if ( c = EXPR ) MyStack.push(c); }

            	while(operatorStack.top().precedence >= c.precedence)
            	    operator = operatorStack.pop();
            	    # Careful! The second operand was pushed last.
            	    e2 = exprStack.pop();
            	    e1 = exprStack.pop();
            	    exprStack.push(ExprNode(operator, e1, e2));

            		operatorStack.push(c);

        		else if (c == ')'){
            		while (operatorStack.top() != '('):
            	    operator = operatorStack.pop()
            	    # Careful! The second operand was pushed last.
            	    e2 = exprStack.pop()
            	    e1 = exprStack.pop()
           		    exprStack.push(ExprNode(operator, e1, e2))
				}
            # Pop the '(' off the operator stack.
            operatorStack.pop()

        else:
            error()
            return 0;

    # There should only be one item on exprStack.
    # It's the root node, so we return it.
    return exprStack.pop()
	

	/// <summary>
	/// Enter a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] RussianParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] RussianParser.CallContext context);
# Parser
			ExprNode parse(string input){
    			char c;
				while (c = input.getNextChar()) {
					if ( c = ASSIGN ) MyStack.push(c); }

            	while(operatorStack.top().precedence >= c.precedence)
            	    operator = operatorStack.pop();
            	    # Careful! The second operand was pushed last.
            	    e2 = exprStack.pop();
            	    e1 = exprStack.pop();
            	    exprStack.push(ExprNode(operator, e1, e2));

            		operatorStack.push(c);

        		else if (c == ')'){
            		while (operatorStack.top() != '('):
            	    operator = operatorStack.pop()
            	    # Careful! The second operand was pushed last.
            	    e2 = exprStack.pop()
            	    e1 = exprStack.pop()
           		    exprStack.push(ExprNode(operator, e1, e2))
				}
            # Pop the '(' off the operator stack.
            operatorStack.pop()

        else:
            error()
            return 0;

    # There should only be one item on exprStack.
    # It's the root node, so we return it.
    return exprStack.pop()
	

	/// <summary>
	/// Enter a parse tree produced by the <c>prim</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrim([NotNull] RussianParser.PrimContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>prim</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrim([NotNull] RussianParser.PrimContext context)

	/// <summary>
	/// Enter a parse tree produced by the <c>SinCosTanLnSqrt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSinCosTanLnSqrt([NotNull] RussianParser.SinCosTanLnSqrtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SinCosTanLnSqrt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSinCosTanLnSqrt([NotNull] RussianParser.SinCosTanLnSqrtContext context)
		{
		object s;
		object a;
		object b;
		object c;
        public override double VisitCompileUnit(RussianParser.CompileUnitContext context)
        {
            return Listen(context.expression(0));
        }
        public override double VisitExpression(RussianrParser.ExpressionContext context)
        {
            s = context.expression(0);
        }
		if ( s == '\u0441\u0438\u043d\u0443\u0441' ) // 'синус'
		{
			b = " \ sin ( ";
			c = myStack.Pop();
			a = " ) "
			s = b + c + a;
			MyStack.push(s);
		}
		if ( s =='\u043a\u043e\u0441\u0438\u043d\u0443\u0441' ) // 'косинус'
		{
			b = " \ cos ( ";
			c = myStack.Pop();
			a = " ) "
			s = b + c + a;
			MyStack.push(s);
		}		
		if ( s == '\u0442\u0430\u043d\u0433\u0435\u043d\u0441' ) // 'тангенс'
		{
			b = " \ tan ( ";
			c = myStack.Pop();
			a = " ) "
			s = b + c + a;
			MyStack.push(s);
		}	
		if ( s == '\u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0439\u0020\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c')  // 'натуральный логарифм
		{
			b = " \ ln ( ";
			c = myStack.Pop();
			a = " ) "
			s = b + c + a;
			MyStack.push(s);
		}	
		if ( s == '\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0439\u0020\u043a\u043e\u0440\u0435\u043d\u044c' ||
		 '\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0439\u0020\u043a\u043e\u0440\u0435\u043d\u044c\u0020\u0438\u0437' // кв корень
		{
			b = " \ sqrt{";
			c = myStack.Pop();
			a = "} "
			s = b + c + a;
			MyStack.push(s);
		}	
	}	
	/// <summary>
	/// Enter a parse tree produced by the <c>ModMulDivGtLt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModMulDivGtLt([NotNull] RussianParser.ModMulDivGtLtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModMulDivGtLt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModMulDivGtLt([NotNull] RussianParser.ModMulDivGtLtContext context)
	{
		object s;
		object a;
		object b;
		object c;
        public object Node
		{
        	get
        	{
            	return Node;
        	}
 
        	set
        	{
           		Node = value;
        	}
		s = Node;
		if ( s == '\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c\u0020\u043f\u043e\u0020\u043c\u043e\u0434\u0443\u043b\u044e'
        || '\u043f\u043e\u0020\u043c\u043e\u0434\u0443\u043b\u044e') // mod
		{
			a = myStack.Pop(); 
			b = " \ bmod ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}
		if ( s == '\u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c' ||
		 '\u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c\u0020\u043d\u0430' || '\u043d\u0430' ) // mul                                                          // 'на'
		{
			a = myStack.Pop(); 
			b = " * ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}		
		if ( s == '\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c' ||
		 '\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c\u0020\u043d\u0430' // div
		{
			a = myStack.Pop(); 
			b = " / ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}	
		if ( s == '\u0431\u043e\u043b\u044c\u0448\u0435' ) // 'больше' '>'
		{
			a = myStack.Pop(); 
			b = " > ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}	
		if ( s == '\u043c\u0435\u043d\u044c\u0448\u0435' ) // 'меньше' '<'
		{
			a = myStack.Pop(); 
			b = " < ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}
		if ( s == '\u0431\u043e\u043b\u044c\u0448\u0435\u0020\u0438\u043b\u0438\u0020\u0440\u0430\u0432\u043d\u043e' ) // 'больше' '>' или равно
		{
			a = myStack.Pop(); 
			b = " => ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}	
		if ( s == '\u043c\u0435\u043d\u044c\u0448\u0435\u0020\u0438\u043b\u0438\u0020\u0440\u0430\u0432\u043d\u043e' ) // 'меньше' '<' или равно
		{
			a = myStack.Pop(); 
			b = " <= ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}	
	}
	/// <summary>
	/// Enter a parse tree produced by the <c>unary</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary([NotNull] RussianParser.UnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unary</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary([NotNull] RussianParser.UnaryContext context)
	{
		object s;
		object b;
		object c;        		
        public object Node
		{
        	get
        	{
            	return Node;
        	}
 
        	set
        	{
           		Node = value;
        	}
		s = Node;
		if ( s == '\u043f\u043b\u044e\u0441' || '\u043f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c' ) // плюс
		{			 
			b = " + ";
			c = myStack.Pop();
			s = b + c;
			MyStack.push(s);
		}
		if ( s == '\u043c\u0438\u043d\u0443\u0441' || '\u043e\u0442\u043d\u044f\u0442\u044c' )  // минус
		{		
			b = " - ";
			c = myStack.Pop();
			s = b + c;
			MyStack.push(s);
		}		
	}	
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSubPow</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSubPow([NotNull] RussianParser.AddSubPowContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSubPow</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSubPow([NotNull] RussianParser.AddSubPowContext context)
	{
		ITokenStream tokens = parser.getITokenStream();
		ID = tokens.getText(context.Id());
		String args = tokens.getText(context.Id());
		MyStack.push(args);
	}
	{
		object s;
		object a;
		object b;
		object c;
		public object Node
		{
        	get
        	{
            	return Node;
        	}
 
        	set
        	{
           		Node = value;
        	}
        s = Node;
		if ( s == '\u043f\u043b\u044e\u0441' || '\u043f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c' ) // плюс
		{
			a = myStack.Pop(); 
			b = " + ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}
		if ( s == '\u043c\u0438\u043d\u0443\u0441' || '\u043e\u0442\u043d\u044f\u0442\u044c' )  // минус
		{
			a = myStack.Pop(); 
			b = " - ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}
		if ( s =='\u0432\u043e\u0437\u0432\u0435\u0441\u0442\u0438\u0020\u0432\u0020\u0441\u0442\u0435\u043f\u0435\u043d\u044c' ||
		 '\u0432\u0020\u0441\u0442\u0435\u043f\u0435\u043d\u044c' ||
		  '\u0432\u0020\u0441\u0442\u0435\u043f\u0435\u043d\u0438' )  // 'в степень'
		{
			a = myStack.Pop(); 
			b = " ^ ";
			c = myStack.Pop();
			s = a + b + c;
			MyStack.push(s);
		}		
	}
	/// <summary>
	/// Enter a parse tree produced by the <c>num</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNum([NotNull] RussianParser.NumContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>num</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNum([NotNull] RussianParser.NumContext context)
	{
		object NUM;
		ITokenStream tokens = parser.getITokenStream();
		NUM = tokens.getText(context.Num());
		//String args = tokens.getText(context.Num());
		MyStack.push(NUM);
	}
	/// <summary>
	/// Enter a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] RussianParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] RussianParser.IdContext context)
	{
		object ID;
		ITokenStream tokens = parser.getITokenStream();
		ID = tokens.getText(context.Id());
		//String args = tokens.getText(context.Id());
		MyStack.push(ID);
	}	
	/// <summary>
	/// Enter a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] RussianParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] RussianParser.ParensContext context);
}
