//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Russian.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RussianParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IRussianListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RussianParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] RussianParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RussianParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] RussianParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="RussianParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] RussianParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="RussianParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] RussianParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="RussianParser.stat1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintExpr([NotNull] RussianParser.PrintExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="RussianParser.stat1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintExpr([NotNull] RussianParser.PrintExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] RussianParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>call</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] RussianParser.CallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>prim</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrim([NotNull] RussianParser.PrimContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>prim</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrim([NotNull] RussianParser.PrimContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SinCosTanLnSqrt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSinCosTanLnSqrt([NotNull] RussianParser.SinCosTanLnSqrtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SinCosTanLnSqrt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSinCosTanLnSqrt([NotNull] RussianParser.SinCosTanLnSqrtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ModMulDivGtLt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModMulDivGtLt([NotNull] RussianParser.ModMulDivGtLtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModMulDivGtLt</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModMulDivGtLt([NotNull] RussianParser.ModMulDivGtLtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unary</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary([NotNull] RussianParser.UnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unary</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary([NotNull] RussianParser.UnaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSubPow</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSubPow([NotNull] RussianParser.AddSubPowContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSubPow</c>
	/// labeled alternative in <see cref="RussianParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSubPow([NotNull] RussianParser.AddSubPowContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>num</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNum([NotNull] RussianParser.NumContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>num</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNum([NotNull] RussianParser.NumContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] RussianParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] RussianParser.IdContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] RussianParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="RussianParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] RussianParser.ParensContext context);
}
